@model RsApplication



<script>

    function onSeriesClick(e)
    {
        console.log(kendo.format("Series click :: {0} ({1}): {2}", e.series.name, e.category, e.value));
    }

    function onSeriesHover(e)
    {
        console.log(kendo.format("Series hover :: {0} ({1}): {2}", e.series.name, e.category, e.value));
    }

    function onDataBound(e) { console.log("Data bound"); }

    function onAxisLabelClick(e)
    {
        console.log(kendo.format("Axis label click :: {0} axis : {1}", e.axis.type, e.text));
    }

    function onPlotAreaClick(e) { console.log(kendo.format("Plot area click :: {0} : {1:N0}", e.category, e.value)); }

    function onPlotAreaHover(e) { console.log(kendo.format("Plot area hover :: {0} : {1:N0}", e.category, e.value)); }

    function onRender(e) { console.log("Render"); }

    function onLegendItemClick(e) { console.log(kendo.format("Legend item click :: {0}", e.text)); }

    function onLegendItemHover(e) { console.log(kendo.format("Legend item hover :: {0}", e.text)); }

    function onDragStart(e) { console.log("Drag start"); }

    function onDrag(e) { console.log("Drag"); }

    function onDragEnd(e) { console.log("Drag end"); }

    function onZoomStart(e) { console.log("Zoom start"); }

    function onZoom(e)
    {
        console.log(kendo.format("Zoom :: {0}", e.delta));

        // Prevent scrolling
        e.originalEvent.preventDefault();
    }

    function onZoomEnd(e) { console.log("Zoom end"); }

</script>


<style>
    .columnWrapper
    {
        width: 100%;
        margin: 0 1px;
        min-width: 5px;
        display: flex;
        flex-direction: column-reverse;
    }

    .columnBlock
    {
        width: 100%;
    }
</style>


<script>

    function chartMouseClick(obj) { console.log(obj.target); }
    //window.onChartLoad = function(obj)
    //{
    //    console.log("hi");
    //};

    function getChartData()
    {
        console.log("got data for chart");

        $.ajax({
            type: "POST",
            url: "@(Url.Action("ChartDataAjax", "Home", new {app = Model}))",
            // передача в качестве объекта
            // поля будут закодированые через encodeURIComponent автоматически
            success: function(result)
            {
                let wrapper = document.getElementById("chartWrapper");
                let columns = result.columns;
                let line = result.line;

                columns.forEach(function(currentApp, appIndex, appArray)
                {
                    currentApp.DataSource.forEach(function(currentDay, dayIndex, dayArray)
                    {
                        let columnWrapperId = `columnWrapper_${currentDay.X}`;
                        let columnWrapper = document.getElementById(columnWrapperId);

                        if (!columnWrapper)
                        {
                            columnWrapper = document.createElement("div");
                            columnWrapper.id = columnWrapperId;
                            columnWrapper.classList.add("columnWrapper");
                            wrapper.appendChild(columnWrapper);
                        }

                        let columnBlock = document.createElement("div");
                        //columnBlock.id =
                        columnBlock.classList.add("columnBlock");
                        columnBlock.style.backgroundColor = currentApp.Color;
                        columnBlock.style.height = currentDay.Y * 50 + "%";
                        columnWrapper.appendChild(columnBlock);
                    });
                });
            },
            error: function(err) { console.log("error: " + err); }
        });
    }

</script>


<div class="demo-section k-content wide">


    @*<div style="overflow-x: scroll; height:350px; width:100%;">
            <div id="chartWrapper"
                 style="height: 300px; width: 100%; display: flex;"></div>
        </div>*@



    @{
        Html.Kendo()
            .Chart()
            .RenderAs(RenderingMode.SVG)
            .Name("chart")
            .Zoomable(conf =>
            {
                conf.Mousewheel(opt => opt.Lock(ChartAxisLock.Y))
                    .Selection(selection => selection.Lock(ChartAxisLock.Y));
            })
            .Pannable(conf => conf.Lock(ChartAxisLock.Y))
            .HtmlAttributes(new { style = "height:300px; width:100%" })
            .Title("")
            .Legend(legend => legend.Position(ChartLegendPosition.Bottom))
            .Series(series =>
            {
                foreach (var columnChartSeries in (IEnumerable<ChartSeries<DateTime, decimal>>)ViewBag.ColumnsDataSource)
                {
                    series.Column(columnChartSeries.DataSource)
                          //.Aggregate(conf => conf.Close(ChartSeriesAggregate.Sum))
                          .CategoryField("X")
                          .Field("Y")
                          .Stack(true)
                          .Color(columnChartSeries.Color)
                          .Name(columnChartSeries.Name)
                          .DynamicHeight(true)
                          .DynamicSlope(true)
                          .Border(b => b.Width(0));
                }

                foreach (var lineChartSeries in (IEnumerable<ChartSeries<DateTime, decimal>>)ViewBag.LineDataSource)
                {
                    series.Line(lineChartSeries.DataSource)
                          .CategoryField("X")
                          .Field("Y")
                          .Style(ChartSeriesStyle.Step)
                          .Markers(m => m.Visible(false).Size(0))
                          .Color(lineChartSeries.Color)
                          .Name(lineChartSeries.Name)
                          .Tooltip(t => t.Visible(false))
                          .VisibleInLegend(false)
                          .DynamicHeight(true)
                          .DynamicSlope(true);
                }

            })
            .CategoryAxis(axis =>
            {
                axis.Date()
                    .Min(Model.BeginDate)
                    .Max((Model.EndDate - Model.BeginDate).Days > 100
                             ? Model.BeginDate.AddDays(100)
                             : Model.EndDate)
                    .BaseUnit(ChartAxisBaseUnit.Days)
                    .Justify(true)
                    .MinorGridLines(conf => conf.Visible(false))
                    .MinorTicks(conf => conf.Visible(false))
                    .MajorGridLines(conf => conf.Visible(false))
                    .MajorTicks(conf => conf.Visible(false))

                    //.AutoBaseUnitSteps(conf => conf.Days())
                    // Align the first two value axes to the left
                    // and the last two to the right.
                    //
                    // Right alignment is done by specifying a
                    // crossing value greater than or equal to
                    // the number of categories.
                    //.AxisCrossingValue(0, 0, 10, 10)
                    //.PlotBands(conf => conf.)
                    .Labels(conf => conf.Step(20) /*.Rotation("auto")*/);
            })
            .ValueAxis(axis =>
            {
                axis.Numeric()
                    //.Name("rateAxis")
                    .Title("ставка")
                    .Min(0.0)
                    .Max(2.0)
                    .MajorUnit(0.25);
            })
            .Tooltip(tooltip =>
            {
                tooltip.Visible(true)
                       .Shared(true)
                       .Template("#= series.name #: #= value #");
            })
            .Events(events =>
            {
                events.SeriesClick("onSeriesClick")

                      //.SeriesHover("onSeriesHover")
                      .DataBound("onDataBound")
                      .AxisLabelClick("onAxisLabelClick");
            })
            .Render();

        //.PlotAreaClick("onPlotAreaClick")
        //.PlotAreaHover("onPlotAreaHover")
        //.Render("onRender")
        //.LegendItemClick("onLegendItemClick")
        //.LegendItemHover("onLegendItemHover")
        //.DragStart("onDragStart")
        //.Drag("onDrag")
        //.DragEnd("onDragEnd")
        //.ZoomStart("onZoomStart")
        //.Zoom("onZoom")
        //.ZoomEnd("onZoomEnd")
    }

</div>





<script>

    //$(document).ready(function ()
    //{
    //    var chart = $("#chart").data("kendoChart");
    //    var series = chart.options.series;

    //    series[0].gap = 0.75;
    //    series[0].spacing = 0.1;

    //    chart.redraw();
    //});

    //$(document).ready(function () { getChartData(); });

</script>
