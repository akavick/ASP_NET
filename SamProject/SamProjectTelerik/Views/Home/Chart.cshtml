@model RsApplication



<script>

    function onSeriesClick(e)
    {
        console.log(kendo.format("Series click :: {0} ({1}): {2}", e.series.name, e.category, e.value));
    }

    function onSeriesHover(e)
    {
        console.log(kendo.format("Series hover :: {0} ({1}): {2}", e.series.name, e.category, e.value));
    }

    function onDataBound(e)
    {
        console.log("Data bound");
    }

    function onAxisLabelClick(e)
    {
        console.log(kendo.format("Axis label click :: {0} axis : {1}", e.axis.type, e.text));
    }

    function onPlotAreaClick(e)
    {
        console.log(kendo.format("Plot area click :: {0} : {1:N0}", e.category, e.value));
    }

    function onPlotAreaHover(e)
    {
        console.log(kendo.format("Plot area hover :: {0} : {1:N0}", e.category, e.value));
    }

    function onRender(e)
    {
        console.log("Render");
    }

    function onLegendItemClick(e)
    {
        console.log(kendo.format("Legend item click :: {0}", e.text));
    }

    function onLegendItemHover(e)
    {
        console.log(kendo.format("Legend item hover :: {0}", e.text));
    }

    function onDragStart(e)
    {
        console.log("Drag start");
    }

    function onDrag(e)
    {
        console.log("Drag");
    }

    function onDragEnd(e)
    {
        console.log("Drag end");
    }

    function onZoomStart(e)
    {
        console.log("Zoom start");
    }

    function onZoom(e)
    {
        console.log(kendo.format("Zoom :: {0}", e.delta));

        // Prevent scrolling
        e.originalEvent.preventDefault();
    }

    function onZoomEnd(e)
    {
        console.log("Zoom end");
    }

</script>





<div class="demo-section k-content wide">

    @(Html.Kendo()
                  .Chart()
                  .Name("chart")
                  .Zoomable(zoom => zoom.Mousewheel(opt => opt.Lock(ChartAxisLock.Y)))
                  .HtmlAttributes(new { width = "100%", height = "100%" })
                  .Title("")
                  .Legend(legend => legend.Position(ChartLegendPosition.Bottom))
                  .Series(series =>
                  {
                      foreach (var columnChartSeries in (IEnumerable<ChartSeries<DateTime, decimal>>)ViewBag.ColumnsDataSource)
                      {
                          series
                              .Column(columnChartSeries.DataSource)
                              .CategoryField("X")
                              .Field("Y")
                              .Stack(true)
                              .Color(columnChartSeries.Color)
                              .Name(columnChartSeries.Name)
                              .DynamicHeight(true)
                              .DynamicSlope(true)
                              .Border(b => b.Width(0));
                      }

                      foreach (var lineChartSeries in (IEnumerable<ChartSeries<DateTime, decimal>>)ViewBag.LineDataSource)
                      {
                          series
                              .Line(lineChartSeries.DataSource)
                              .CategoryField("X")
                              .Field("Y")
                              .Style(ChartSeriesStyle.Step)
                              .Markers(m => m.Visible(false).Size(0))
                              .Color(lineChartSeries.Color)
                              .Name(lineChartSeries.Name)
                              .Tooltip(t => t.Visible(false))
                              .VisibleInLegend(false)
                              .DynamicHeight(true)
                              .DynamicSlope(true);
                      }

                  })
                  .CategoryAxis(axis => axis.Date()
                                            .BaseUnit(ChartAxisBaseUnit.Days)
                  // Align the first two value axes to the left
                  // and the last two to the right.
                  //
                  // Right alignment is done by specifying a
                  // crossing value greater than or equal to
                  // the number of categories.
                  //.AxisCrossingValue(0, 0, 10, 10)
                  )
                  .ValueAxis(axis => axis.Numeric()
                                         //.Name("rateAxis")
                                         .Title("ставка")
                                         .Min(0.0)
                                         .Max(2.0)
                                         .MajorUnit(0.25))

                  .Tooltip(tooltip => tooltip.Visible(true)
                                             .Shared(true)
                                             .Template("#= series.name #: #= value #"))
                  .Events(events => events
                      .SeriesClick("onSeriesClick")
                      //.SeriesHover("onSeriesHover")
                      .DataBound("onDataBound")
                      .AxisLabelClick("onAxisLabelClick")
                      .PlotAreaClick("onPlotAreaClick")
                      //.PlotAreaHover("onPlotAreaHover")
                      .Render("onRender")
                      .LegendItemClick("onLegendItemClick")
                      .LegendItemHover("onLegendItemHover")
                      .DragStart("onDragStart")
                      .Drag("onDrag")
                      .DragEnd("onDragEnd")
                      .ZoomStart("onZoomStart")
                      .Zoom("onZoom")
                      .ZoomEnd("onZoomEnd")
                  )

    )
</div>





<script>

    $(document).ready(function ()
    {
        var chart = $("#chart").data("kendoChart");
        var series = chart.options.series;

        series[0].gap = 0.75;
        series[0].spacing = 0.1;

        chart.redraw();
    });

</script>