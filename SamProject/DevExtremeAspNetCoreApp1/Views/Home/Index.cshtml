@using DevExtremeAspNetCoreApp1.Models

<h2>Home</h2>


<div>

    @(Html.DevExtreme()
          .Chart()
          .ID("chart")
          .CommonSeriesSettings(s => s
              .ArgumentField("State")
              .Type(SeriesType.StackedBar)
          )
          .Series(s =>
          {
              s.Add().ValueField("Young").Name("0-14");
              s.Add().ValueField("Middle").Name("15-64");
              s.Add().ValueField("Older").Name("65 and older");
          })
          .Legend(l => l
              .VerticalAlignment(VerticalEdge.Bottom)
              .HorizontalAlignment(HorizontalAlignment.Center)
              .ItemTextPosition(Position.Top)
          )
          .ValueAxis(a => a
              .Add()
              .Title(t => t.Text("millions"))
              .Position(Position.Right)
          )
          .Title("Male Age Structure")
          .Export(e => e.Enabled(true))
          .Tooltip(t => t
              .Enabled(true)
              .Location(ChartTooltipLocation.Edge)
              .CustomizeTooltip(@<text>
                function(arg) {
                return {
                text: arg.seriesName + " years: " + arg.valueText
                };
                }
            </text>)
          )
          .DataSource(ViewBag.BarDataSource)
    )

</div>


<div>

    @(Html.DevExtreme().Chart()
                    .ID("chart2")
                    .Palette(VizPalette.Vintage)
                    .CommonSeriesSettings(s => s
                        .ArgumentField("Year")
                        .Type(SeriesType.FullStackedBar)
                    )
                    .Series(s =>
                    {
                        s.Add().ValueField("Africa").Name("Africa");
                        s.Add().ValueField("Asia").Name("Asia");
                        s.Add().ValueField("Europe").Name("Europe");
                        s.Add().ValueField("Latinamerica").Name("Latin America & Caribbean");
                        s.Add().ValueField("Northamerica").Name("Northern America");
                        s.Add().ValueField("Oceania").Name("Oceania");
                        s.Add().Axis("Total").Type(SeriesType.Spline).ValueField("Total").Name("Total").Color("#008fd8");
                    })
                    .ValueAxis(a =>
                    {
                        a.Add().Grid(g => g.Visible(true));
                        a.Add()
                            .Name("Total")
                            .Position(Position.Right)
                            .Grid(g => g.Visible(true))
                            .Title(t => t.Text("Total Population, billions"));
                    })
                    .Tooltip(t => t
                        .Enabled(true)
                        .Shared(true)
                        .Format(f => f.Type(Format.LargeNumber).Precision(1))
                        .CustomizeTooltip(@<text>
                            function (arg) {
                            var items = arg.valueText.split("\n"),
                            color = arg.point.getColor();
                            $.each(items, function(index, item) {
                            if(item.indexOf(arg.seriesName) === 0) {
                            items[index] = $("<span>
                                ")
                                .text(item)
                                .addClass("active")
                                .css("color", color)
                                .prop("outerHTML");
                                }
                                });
                                return { text: items.join("\n") };
                                }
                        </text>)
                                            )
                                            .Legend(l => l
                                                .VerticalAlignment(VerticalEdge.Bottom)
                                                .HorizontalAlignment(HorizontalAlignment.Center)
                                            )
                                            .Export(e => e.Enabled(true))
                                            .Title(t => t.Text("Evolution of Population by Continent"))
                                            .DataSource(new List<object> {
new { Year = "1750", Africa = 106000000, Asia = 502000000, Europe = 163000000, Latinamerica = 16000000, Northamerica = 2000000, Oceania = 2000000, Total = 791000000 },
new { Year = "1800", Africa = 107000000, Asia = 635000000, Europe = 203000000, Latinamerica = 24000000, Northamerica = 7000000, Oceania = 2000000, Total = 978000000 },
new { Year = "1850", Africa = 111000000, Asia = 809000000, Europe = 276000000, Latinamerica = 38000000, Northamerica = 26000000, Oceania = 2000000, Total = 1262000000 },
new { Year = "1900", Africa = 133000000, Asia = 947000000, Europe = 408000000, Latinamerica = 74000000, Northamerica = 82000000, Oceania = 6000000, Total = 1650000000 },
new { Year = "1950", Africa = 229895000, Asia = 1403388000, Europe = 547287000, Latinamerica = 167368000, Northamerica = 171614000, Oceania = 12675000, Total = 2532227000 },
new { Year = "2000", Africa = 811101000, Asia = 3719044000, Europe = 726777000, Latinamerica = 521419000, Northamerica = 313289000, Oceania = 31130000, Total = 6122770000 },
new { Year = "2050", Africa = 2191599000, Asia = 5142220000, Europe = 719257000, Latinamerica = 750956000, Northamerica = 446862000, Oceania = 55223000, Total = 9306128000 }
                                            })
    )

</div>







@*<div>
        <dx:BootstrapChart ID="ChartStackedBar"
                           runat="server"
                           DataSourceUrl="~/jsondata/stackedbar.json"
                           TitleText="Male Age Structure">
            <SettingsCommonSeries ArgumentField="state"/>
            <SeriesCollection>
                <dx:BootstrapChartStackedBarSeries ValueField="young"
                                                   Name="0-14"/>
                <dx:BootstrapChartStackedBarSeries ValueField="middle"
                                                   Name="15-64"/>
                <dx:BootstrapChartStackedBarSeries ValueField="older"
                                                   Name="65 and older"/>
            </SeriesCollection>
            <ArgumentAxis ValueMarginsEnabled="false"
                          DiscreteAxisDivisionMode="CrossLabels"
                          GridVisible="true"
                          TickInterval="1"/>
            <SettingsLegend VerticalAlignment="Bottom"
                            HorizontalAlignment="Center"
                            ItemTextPosition="Top"/>
            <ValueAxisCollection>
                <dx:BootstrapChartValueAxis TitleText="millions"
                                            Position="Right"/>
            </ValueAxisCollection>
            <CssClasses Control="demo-chart"/>
        </dx:BootstrapChart>
    </div>*@





@*@(Html.DevExtreme().DataGrid<Order>()
        .ShowBorders(true)
        .DataSource(d => d.Mvc().Controller("Orders").LoadAction("Get").Key("OrderID"))
        .Columns(columns => {
            columns.AddFor(m => m.OrderID);
            columns.AddFor(m => m.OrderDate);
            columns.AddFor(m => m.CustomerName);
            columns.AddFor(m => m.ShipCountry);
            columns.AddFor(m => m.ShipCity);
        })
        .Paging(p => p.PageSize(10))
        .FilterRow(f => f.Visible(true))
        .HeaderFilter(f => f.Visible(true))
        .GroupPanel(p => p.Visible(true))
        .Grouping(g => g.AutoExpandAll(false))
        .RemoteOperations(true)
        .Summary(s => s
            .TotalItems(totalItems => {
                totalItems.AddFor(m => m.ShipCity).SummaryType(SummaryType.Count);
            })
            .GroupItems(groupItems => {
                groupItems.Add().SummaryType(SummaryType.Count);
            })
        )
    )*@

