@model RsApplication
@using  DevExtreme.Controllers




<script>

    function chartMouseClick(obj)
    {
        console.log(obj.target);
    }
    //window.onChartLoad = function(obj)
    //{
    //    console.log("hi");
    //};

</script>


<div id="chartWrapper"
     style="width:100%">

    @{
        var now = DateTime.Now.Date;
        var projects = new[] { "P1", "P2", "P3" };
        const string lineName = "Line";

        //var datasource = new List<Dictionary<string, object>>
        //{
        //    new Dictionary<string, object> { { "Date", now.AddDays(1) }, { projects[0], 1.00 } },
        //    new Dictionary<string, object> { { "Date", now.AddDays(2) }, { projects[0], 1.00 } },
        //    new Dictionary<string, object> { { "Date", now.AddDays(3) }, { projects[0], 1.00 } },
        //    new Dictionary<string, object> { { "Date", now.AddDays(4) }, { projects[0], 1.00 } },
        //    new Dictionary<string, object> { { "Date", now.AddDays(5) }, { projects[0], 0.75 } },
        //    new Dictionary<string, object> { { "Date", now.AddDays(6) }, { projects[0], 0.75 } },
        //    new Dictionary<string, object> { { "Date", now.AddDays(3) }, { projects[0], 0.25 } },
        //    new Dictionary<string, object> { { "Date", now.AddDays(4) }, { projects[0], 0.25 } },
        //    new Dictionary<string, object> { { "Date", now.AddDays(5) }, { projects[0], 0.50 } },
        //    new Dictionary<string, object> { { "Date", now.AddDays(6) }, { projects[0], 0.50 } },
        //    new Dictionary<string, object> { { "Date", now.AddDays(0) }, { projects[1], 1.00 } },
        //    new Dictionary<string, object> { { "Date", now.AddDays(2) }, { projects[1], 0.50 } },
        //    new Dictionary<string, object> { { "Date", now.AddDays(3) }, { projects[1], 0.50 } },
        //    new Dictionary<string, object> { { "Date", now.AddDays(4) }, { projects[1], 0.50 } },
        //    new Dictionary<string, object> { { "Date", now.AddDays(0) }, { projects[2], 0.25 } },
        //    new Dictionary<string, object> { { "Date", now.AddDays(2) }, { projects[2], 0.25 } },
        //    new Dictionary<string, object> { { "Date", now.AddDays(1) }, { projects[2], 0.25 } },
        //    new Dictionary<string, object> { { "Date", now.AddDays(0).AddHours(-12) }, { lineName, 1.25 } },
        //    new Dictionary<string, object> { { "Date", now.AddDays(1).AddHours(-12) }, { lineName, 1.25 } },
        //    new Dictionary<string, object> { { "Date", now.AddDays(2).AddHours(-12) }, { lineName, 1.50 } },
        //    new Dictionary<string, object> { { "Date", now.AddDays(3).AddHours(-12) }, { lineName, 1.50 } },
        //    new Dictionary<string, object> { { "Date", now.AddDays(4).AddHours(-12) }, { lineName, 1.50 } },
        //    new Dictionary<string, object> { { "Date", now.AddDays(5).AddHours(-12) }, { lineName, 1.50 } },
        //    new Dictionary<string, object> { { "Date", now.AddDays(6).AddHours(-12) }, { lineName, 1.25 } },
        //    new Dictionary<string, object> { { "Date", now.AddDays(7).AddHours(-12) }, { lineName, 1.25 } },
        //};

        var datasource = new List<object>
        {
            new { Date = now.AddDays(1), Project = projects[0], Rate = 1.00 },
            new { Date = now.AddDays(2), Project = projects[0], Rate = 1.00 },
            new { Date = now.AddDays(3), Project = projects[0], Rate = 1.00 },
            new { Date = now.AddDays(4), Project = projects[0], Rate = 1.00 },

            new { Date = now.AddDays(5), Project = projects[0], Rate = 1.00 },
            new { Date = now.AddDays(6), Project = projects[0], Rate = 1.00 },

            new { Date = now.AddDays(3), Project = projects[0], Rate = 0.25 },
            new { Date = now.AddDays(4), Project = projects[0], Rate = 0.25 },

            new { Date = now.AddDays(0), Project = projects[1], Rate = 1.00 },

            new { Date = now.AddDays(0), Project = projects[2], Rate = 0.25 },
            new { Date = now.AddDays(1), Project = projects[2], Rate = 0.25 },
            new { Date = now.AddDays(2), Project = projects[2], Rate = 0.25 },

            
            new { Date = now.AddDays(2), Project = projects[1], Rate = 0.50 },
            new { Date = now.AddDays(3), Project = projects[1], Rate = 0.50 },
            new { Date = now.AddDays(4), Project = projects[1], Rate = 0.50 },

            new { Date = now.AddDays(0).AddHours(-12), Project = lineName, Rate = 1.25 },
            new { Date = now.AddDays(1).AddHours(-12), Project = lineName, Rate = 1.25 },
            new { Date = now.AddDays(2).AddHours(-12), Project = lineName, Rate = 1.50 },
            new { Date = now.AddDays(3).AddHours(-12), Project = lineName, Rate = 1.50 },
            new { Date = now.AddDays(4).AddHours(-12), Project = lineName, Rate = 1.50 },
            new { Date = now.AddDays(5).AddHours(-12), Project = lineName, Rate = 1.50 },
        };


        Html
        .DevExtreme()
        .Chart()
        .ID("chart")
        //.Palette(VizPalette.Violet)
        .ArgumentAxis(axis =>
        {
            axis.ArgumentType(ChartDataType.DateTime)
                .TickInterval(ti => ti.Days(1));
        })
        .ValueAxis(a =>
        {
            a.Add()
             .Title(t => t.Text("Rate"))
             .Position(Position.Left)
             .TickInterval(0.25)
             .MinorTickInterval(0.25)
             .Tick(t => t.Visible(true))
             .MinorTick(mt => mt.Visible(true))
             .Max(2.0)
             .ShowZero(true)
             .Label(l => l.DisplayMode(ChartLabelDisplayMode.Stagger));
        })
        .Title("")
        .CommonSeriesSettings(s =>
        {
            s.ArgumentField("Date")
             .ValueField("Rate")
             .Type(SeriesType.StackedBar)
             .Stackedbar(sb =>
             {
                 sb.Aggregation(a =>
                 {
                     a.Enabled(true)
                      .Method(ChartSeriesAggregationMethod.Sum);
                 });
             });
        })
        .SeriesTemplate(st =>
        {
            st.NameField("Project")
              .CustomizeSeries(@"
                        function(valueFromNameField)
                        {
                            return valueFromNameField === ""Line""
                                ? {
                                    type: ""stepline"",
                                    label: { visible: false },
                                    point: { visible: false },
                                    color: ""#ff3f7a"",
                                    hoverMode: ""none""
                                }
                                : {};
                        }");
        })
        //.Series(s =>
        //{
        //    foreach (var p in projects)
        //    {
        //        s.Add()
        //         .Type(SeriesType.StackedBar)
        //         .ArgumentField("Date")
        //         .ValueField(p)
        //         .Name(p);
        //    }

        //    s.Add()
        //     .Type(SeriesType.StepLine)
        //     .Point(p => p.Visible(false))
        //     .ArgumentField("Date")
        //     .HoverMode(ChartSeriesHoverMode.None)
        //     .ValueField("Line")
        //     .Name("AMRate");
        //})
        .Legend(l =>
        {
            l.VerticalAlignment(VerticalEdge.Bottom)
             .HorizontalAlignment(HorizontalAlignment.Center)
             .ItemTextPosition(Position.Top);
        })
        //.Export(e => e.Enabled(true))
        .Tooltip(t =>
        {
            t.Enabled(true)
             .Location(ChartTooltipLocation.Edge)
             .CustomizeTooltip(@"function(arg){return{text: arg.seriesName + "" : "" + arg.valueText};}");
        })
        .DataSource(datasource)
        .Render();
    }
</div>