header > p /*непосредственные дочерние элементы*/
{
    color: blue;
}

main p + div /*на одном уровне и строго соседний и следующий за*/
{
    color: red;
}

aside p ~ div /*все смежные элементы одного уровня следующие за*/
{
    color: blueviolet;
}

footer p /*на любой глубине*/
{
    color: green;
}

:lang(ru)
{
    color: red;
}

/*
    div.class{} - div with class "class"
    div .class{} - div's children with class "class"
*/

/*
    :root: позволяет выбрать корневой элемент веб-страницы, наверное наименее полезный селектор, так как на правильной веб-странице корневым элементом практически всегда является элемент <html>
    :link: применяется к ссылкам и представляет ссылку в обычном состоянии, по которой еще не совершен переход
    :visited: применяется к ссылкам и представляет ссылку, по которой пользователь уже переходил
    :active: применяется к ссылкам и представляет ссылку в тот момент, когда пользователь осуществляет по ней переход
    :hover: представляет элемент, на который пользователь навел указатель мыши. Применяется преимущественно к ссылкам, однако может также применяться и к другим элементам, например, к параграфам
    :focus: представляет элемент, который получает фокус, то есть когда пользователь нажимает клавишу табуляции или нажимает кнопкой мыши на поле ввода (например, текстовое поле)
    :not: позволяет исключить элементы из списка элементов, к которым применяется стиль a:not(.blueLink)
    :lang: стилизует элементы на основании значения атрибута lang
    :empty: выбирает элементы, которые не имеют вложенных элементов, то есть являются пустыми

    
    :first-child: представляет элемент, который является первым дочерним элементом
    :last-child: представляет элемент, который является последним дочерним элементом
    :only-child: представляет элемент, который является единственным дочерним элементом в каком-нибудь контейнере
    :only-of-type: выбирает элемент, который является единственным элементом определенного типа (тега) в каком-нибудь контейнере
    :nth-child(n): представляет дочерний элемент, который имеет определенный номер n, например, второй дочерний элемент
    :nth-last-child(n): представляет дочерний элемент, который имеет определенный номер n, начиная с конца
    :nth-of-type(n): выбирает дочерний элемент определенного типа, который имеет определенный номер
    :nth-last-of-type(n): выбирает дочерний элемент определенного типа, который имеет определенный номер, начиная с конца


    :enabled: выбирает элемент, если он доступен для выбора (то есть у него не установлен атрибут disabled)
    :disabled: выбирает элемент, если он не доступен для выбора (то есть у него установлен атрибут disabled)
    :checked: выбирает элемент, если у него установлен атрибут checked (для флажков и радиокнопок)
    :default: выбирает элементы по умолчанию
    :valid: выбирает элемент, если его значение проходит валидацию HTML5
    :invalid: выбирает элемент, если его значение не проходит валидацию
    :in-range: выбирает элемент, если его значение находится в определенном диапазоне (для элементов типа ползунка)
    :out-of-range: выбирает элемент, если его значение не находится в определенном диапазоне
    :required: выбирает элемент, если у него установлен атрибут required
    :optional: выбирает элемент, если у него не установлен атрибут required

    селекторы атрибутов
            input[type="text"]
            .link[href="http://apple.com"]
            a[href^="https://"] - ^ позволяет выбрать все атрибуты, которые начинаются на определенный текст
            img[src$=".jpg"] - Если значение атрибута должно иметь в конце определенный текст, то для проверки используется символ $
            a[href*="microsoft"] - * позволяет выбрать все элементы с атрибутами, которые в своем значении имеют определенный текст
*/


/*
    ::first-letter: позволяет выбрать первую букву из текста  ::first-letter { color:red; font-size: 25px; }
    ::first-line: стилизует первую строку текста
    ::before: добавляет сообщение до определенного элемента  .warning::before{ content: "Важно! "; font-weight: bold; }
    ::after: добавляет сообщение после определенного элемента  .warning::after { content: " Будьте осторожны!"; font-weight: bold;}
    ::selection: выбирает выбранные пользователем элементы
*/

/*
    При нескольких уровнях вложенности элементы наследуют стили только ближайшего контейнера.
    Селекторы тегов имеют важность, оцениваемую в 1 балл
    Селекторы классов, атрибутов и псевдоклассов оцениваются в 10 баллов
    Селекторы идентификаторов оцениваются в 100 баллов
    Встроенные inline-стили (задаваемые через атрибут style) оцениваются в 1000 баллов
    Правило !important предоставляет возможность полностью отменить значимость стилей.
*/

/*
    div
    {
        //#RRGGBBAA is soon
        background-color: red;
        background-color: #eeccff;
        background-color: #ecf;
        background-color: rgb(100%, 100%, 100%);
        background-color: rgba(100%, 100%, 100%, 0.5);
        background-color: rgb(28, 68, 99);
        background-color: rgba(28, 68, 99, 0.5);
        background-color: hsl(206, 56%, 25%);
        background-color: hsl(206, 56%, 25%, 0.6);
        opacity: 0.4;

        font-family: Arial, Helvetica, "Times New Roman", sans-serif, serif;
        font-weight: normal;
        font-weight: 600;
        font-weight: bold;
        font-style: italic;
        font-size: 18px;
        font-size: x-large; // относительно базового. Базовый стиль для разных элементов текста отличается: если для параграфов это 16 пикселей, то для заголовков h1 это 32 пикселя, для заголовков h2 - 24 пикселя и т..д.
        font-size: 150%; // относительно базового. Базовый стиль для разных элементов текста отличается: если для параграфов это 16 пикселей, то для заголовков h1 это 32 пикселя, для заголовков h2 - 24 пикселя и т..д.
        // Единица измерения еm во многом эквивалентна процентам. Так, 1em равен 100%, .5em равно 50% и т.д.
        color: red;

        text-transform:
            capitalize: делает первую букву слова заглавной
            uppercase: все слово переводится в верхний регистр
            lowercase: все слово переводится в нижний регистр
            none: регистр символов слова никак не изменяется

        text-decoration:   //text-decoration: underline line-through;
            underline: подчеркивает текст
            overline: надчеркивает текст, проводит верхнюю линию
            line-through: зачеркивает текст
            none: к тексту не применяется декорирование

        letter-spacing: 1px;
        word-spacing: -1px;
        text-shadow: 5px 4px 3px #999; // В данном случае горизонтальное смещение тени относительно букв составляет 5 пикселей, а вертикальное смещение вниз - 4 пикселя. Степень размытости - 3 пикселя, и для тени используется цвет #999.
        text-shadow: 5px 4px 3px #999, -5px -4px 3px #999;

        line-height: 150%; // межстрочный интервал. default: line-height: 120%;
        
        text-align:
            left: текст выравнивается по левой стороне
            right: текст выравнивается по правой стороне
            justify: выравнивание по ширине, слова равномерно распределяются по строке
            center: выравнивание по центру

        text-indent: 35px; // отступ первой строки абзаца
        
        специальные свойства по стилизации списков:
        list-style-type:
            для нумерованных списков:
                decimal: десятичные числа, отсчет идет от 1
                decimal-leading-zero: десятичные числа, которые предваряются нулем, например, 01, 02, 03, … 98, 99
                lower-roman: строчные латинские цифры, например, i, ii, iii, iv, v
                upper-roman: заглавные латинские цифры, например, I, II, III, IV, V…
                lower-alpha: строчные латинские буквы, например, a, b, c..., z
                upper-alpha: заглавные латинские буквы, например, A, B, C, … Z
            для ненумерованных списков:
                disc: черный диск
                circle: пустой кружочек
                square: черный квадратик
            общее:
                none
        list-style-position: inside/outside //Веб-браузеры обычно отображают маркеры списка слева от элементов списка. С помощью свойства list-style-position мы можем настроить их позиционирование. Это свойство принимает два значения: outside (по умолчанию) и inside (обеспечивает равномерное распределение по ширине). 
        list-style-image: url(phone_touch.png);

        стилизация таблиц:
        border-collapse: collapse/separate //устанавливает, как будет стилизоваться граница смежных ячеек
        border-spacing: //устанавливает промежутки между границами смежных ячеек
        caption-side: top/bottom //устанавливает положение элемента caption
        empty-cells: show/hide //задает режим отрисовки для пустых ячеек
        table-layout: auto/fixed //определяет размеры таблицы
        vertical-align: //Вертикальное выравнивание ячеек, применяется только к элементам <th> и <td>
            top: выравнивание содержимого по верху ячейки
            baseline: выравнивание первой строки текста по верху ячейки
            middle: выравнивание по центру (значение по умолчанию)
            bottom: выравнивание по низу

        border-style:
            none: граница отсутствует
            solid: граница в виде обычной линии
            dashed: штриховая линия
            dotted: линия в виде последовательности точек
            double: граница в виде двух параллельных линий
            groove: граница имеет трехмерный эффект
            inset: граница как бы вдавливается во внутрь
            outset: аналогично inset, только граница как бы выступает наружу
            ridge: граница также реализует трехмерный эффект

        border-radius: 40px/20px; - для эллипса

        width: 150px;
        width: 75%;
        height: 15em; Единица измерения em зависит от высоты шрифта в элементе. Если размер шрифта элемента, к примеру, равен 16 пикселей, то 1 em для этого элемента будет равен 16 пикселям. То есть если у элемента установить ширину в 15em, то фактически она составит 15 * 16 = 230 пикселей. Если же у элемента не определен размер шрифта, то он будет взят из унаследованных параметров или значений по умолчанию.
        
        width, height определяет только ширину внутреннего содержимого элемента, а под блок самого элемента будет выделяться пространство, ширина которого равна ширине внутреннего содержимого (свойство width) + внутренние отступы (свойство padding) + ширина границы (свойство border-width) + внешние отступы (свойство margin).

        box-sizing: // позволяет переопределить установленные размеры элементов
            content-box: значение свойства по умолчанию, при котором браузер для определения реальных ширины и высоты элементов добавляет к значениям свойств width и height ширину границы и внутренние отступы
            padding-box: указывает веб-браузеру, что ширина и высота элемента должны включать внутренние отступы как часть своего значения.
            border-box: указывает веб-браузеру, что ширина и высота элемента должны включать внутренние отступы и границы как часть своего значения.
            
        https://metanit.com/web/html5/6.14.php
        background: <background-color> <background-position> <background-size> <background-repeat> <background-origin> <background-clip> <background-attachment> <background-image>
            background-color: устанавливает цвет фона
            background-image: в качестве фона устанавливается изображение  url(../images/someimage.png);
                возможна установка градиентов:
                background-image: linear-gradient(left,black,white);
                background-image: linear-gradient(top left,black,white);
                background-image: linear-gradient(30deg,black,white);
                background-image: linear-gradient(top, red, #ccc, blue);
                background-image: linear-gradient(left, #ccc, red 20%, red 80%, #ccc);
                repeating-linear-gradient(left, #ccc 20px, red 30px, rgba(0, 0, 126, 0.5) 40px);
                background-image: radial-gradient(white, black);
                background-image: radial-gradient(ellipse, white, black);
                background-image: radial-gradient(circle, white, black);
                background-image: radial-gradient(25% 30%, circle, white, black);
                background-image: radial-gradient(25% 30%, circle farthest-corner, white, black);
                    closest-side: градиент распространяется из центра только до ближайшей к центру стороне элемента. То есть градиент остается внутри элемента
                    closest-corner: ширина градиента вычисляется по расстоянию из его центра до ближайшего угла элемента, поэтому градиент может выйти за пределы элемента.
                    farthest-side: градиент распространяется из центра до самой дальней стороны элемента
                    farthest-corner: ширина градиента вычисляется по расстоянию из его центра до самого дальнего угла элемента
            background-repeat: устанавливает режим повторения фонового изображения по всей поверхности элемента
                repeat-x: повторение по горизонтали
                repeat-y: повторение по вертикали
                repeat: повторение по обеим сторонам (действие по умолчанию)
                space: изображение повторяется для заполнения всей поверхности элемента, но без создания фрагментов
                round: изображение должным образом масштабируется для полного заполнения всего пространства
                no-repeat: изображение не повторяется
            background-size: устанавливает размер фонового изображения. Если нужно масштабировать изображение таким образом, чтобы оно оптимальнее было вписано в фон, то для обеих настроек можно установить значение 100%: background-size: 100% 100%; // background-size: 200px auto;
                contain: масштабирует изображение по наибольшей стороне, сохраняя аспектное отношение
                cover: масштабирует изображение по наименьшей стороне, сохраняя аспектное отношение
                auto: значение по умолчанию, изображение отображается в полный размер
            background-position: указывает позицию фонового изображения. background-position: отступ_по_оси_X отступ_по_оси_Y; background-position: top right;
                top: выравнивание по верхнему краю элемента
                left: выравнивание по левому краю элемента
                right: выравнивание по правому краю элемента
                bottom: выравнивание по нижнему краю элемента
                center: изображение располагается по центру элемента
            background-attachment: устанавливает стиль прикрепления фонового изображения к элементу
                fixed: фон элемента фиксирован вне зависимости от прокрутки внутри элемента
                local: по мере прокрутки внутри элемента фон изменяется
                scroll: фон фиксирован и не меняется при прокрутке, но в отличие от fixed несколько элементов могут использовать свой фон, тогда как при fixed создается один фон для всех элементов
            background-clip: определяет область, которая вырезается из изображения и используется в качестве фона
                border-box: изображение обрезается по границам элемента
                padding-box: из изображения исключается та часть, которая находится под границами элемента
                content-box: изображение обрезается по содержимому с учетом внутренних отступов        
            background-origin: устанавливает начальную позицию фонового изображения
                border-box: фон у элемента устанавливается начиная с его внешней границы, определяемой свойством border
                padding-box: фон устанавливается с учетом внутренних отступов
                content-box: фон устанавливается по содержимому элемента
    
        box-shadow: hoffset voffset blur spread color inset // позволяет создать у элемента тень // box-shadow: 5px 3px 8px 3px #faa, 10px 4px 10px 3px #888 inset;
            hoffset: горизонтальное смещение тени относительно элемента. При положительном значении тень смещается вправо, а при отрицательном - влево
            voffset: вертикальное смещение тени относительно элемента. При положительном значении тень смещается вниз, а при отрицательном - вверх
            blur: необязательное значение, которое определяет радиус размытия тени. Чем больше это значение, тем более размытыми будут края тени. По умолчанию имеет значение 0.
            spread: необязательное значение, которое определяет направление тени. Положительное значение распространяет тень во вне во всех направлениях от элемента, а отрицательное значение направляет тень к элементу
            color: необязательное значение, которое устанавливает цвет тени
            inset: необязательное значение, которое заставляет рисовать тент внутри блока элемента

        outline: red dashed 2px; Концепция контуров похожа на использование границ у элементов. Не стоит путать или заменять границы контурами, они имеют разное значение. Контуры полезны тем, что позволяют выделить элемент, чтобы привлечь к нему внимание в какой-то ситуации. Контуры располагаются вне элемента сразу за его границами.
            outline-color: цвет контура
            outline-offset: смещение контура
            outline-style: стиль контура. Оно принимает те же значения, что и border-style:
                none: контур отсутствует
                solid: контур в виде обычной линии
                dashed: штриховая линия
                dotted: линия в виде последовательности точек
                double: контур в виде двух параллельных линий

        float: обтекание
            left: элемент перемещается влево, а все содержимое, которое идет ниже его, обтекает правый край элемента
            right: элемент перемещается вправо
            none: отменяет обтекание и возвращает объект в его обычную позицию
        clear: запрет обтекания
            left: стилизуемый элемент может обтекать плавающий элемент справа. Слева же обтекание не работает
            right: стилизуемый элемент может обтекать плавающий элемент только слева. А справа обтекание не работает
            both: стилизуемый элемент может обтекать плавающие элементы и относительно них смещается вниз
            none: стилизуемый элемент ведет себя стандартным образом, то есть принимает участие в обтекании справа и слева
        
        overflow: прокрутка // overflow: auto auto; overflow-x: auto; overflow-y: hidden;
            auto: если контент выходит за границы блока, то создается прокрутка. В остальных случаях полосы прокрутки не отображаются
            hidden: отображается только видимая часть контента. Контент, который выходит за границы блока, не отображается, а полосы прокрутки не создаются
            scroll: в блоке отображаются полосы прокрутки, даже если контент весь помещается в границах блока, и таких полос прокрутки не требуется
            visible: значение по умолчанию, контент отображается, даже если он выходит за границы блока

        display:
            inline: элемент становится строчным, подобно словам в строке текста
            block: элемент становится блочным, как параграф
            inline-block: элемент располагается как строка текста
            list-item: элемент позиционируется как элемент списка обычно с добавление маркера виде точки или порядкового номера
            run-in: тип блока элемента зависит от окружающих элементов
            flex: позволяет осуществлять гибкое позиционирование элментов
            table, inline-table: позволяет расположить элементы в виде таблицы //display: table-cell;
            none: элемент не виден и удален из разметки html

        position:
            static: стандартное позиционирование элемента, значение по умолчанию
            absolute: элемент позиционируется относительно границ элемента-контейнера, если у того свойство position не равно static
            relative: элемент позиционируется относительно его позиции по умолчанию. Как правило, основная цель относительного позиционирования заключается не в том, чтобы переместить элемент, а в том, чтобы установить новую точку привязки для абсолютного позиционированния вложенных в него элементов
            fixed: элемент позиционируется относительно окна бразуера, это позволяет создать фиксированные элементы, которые не меняют положения при прокрутке
        left: 100px;
        top: 50px;
        width: 430px;
        height: 100px; 
        z-index: позволяет изменить порядок следования элементов при их наложении.

        
        transform:
            transform: translate(50px, 100px) skew(30deg, 10deg) scale(1.5) rotate(90deg); 
            rotate(30deg); поворот
            scale(0.5); scale(2, 0.5); Используя отрицательные значения, можно создать эффект зеркального отражения:
            scaleX(2); scaleY(0.5); Используя отрицательные значения, можно создать эффект зеркального отражения:
            translate(50px, 30px); смещение. В качестве единиц измерения смещения можно применять не только пиксели, но и любые другие единицы измерения длины в CSS - em, % и тд. 
            translateX(30px); translateY(-2.5em);
            skew(30deg, 10deg); наклон
            skewX(45deg); skewY(45deg);
         transform-origin: исходная точка (по усмолчанию центр)   
            left top: левый верхний угол элемента
            left bottom: левый нижний угол элемента
            right top: правый верхний угол элемента
            right bottom: правый нижний угол элемента

        transition: переход от одного стиля к другому // transition: background-color 3s ease-in-out 500ms;
            div{
                width: 100px;
                height: 100px;
                margin: 40px 30px;
                border: 1px solid #333;
                 
                background-color: #ccc;
                transition-property: background-color, width; // набор свойств
                transition-duration: 2s, 10s; // длительность
                transition-timing-function: ease-in-out; // функция
                    linear: линейная функция плавности, изменение свойства происходит равномерно по времени
                    ease: функция плавности, при которой анимация ускоряется к середине и замедляется к концу, предоставляя более естественное изменение
                    ease-in: функция плавности, при которой происходит только ускорение в начале
                    ease-out: функция плавности, при которой происходит только ускорение в конце анимации
                    ease-in-out: функция плавности, при которой анимация ускоряется к середине и замедляется к концу, предоставляя более естественное изменение
                    cubic-bezier: для анимации применяется кубическая функция Безье. Для использования кубической Безье в функцию cubic-bezier необходимо передать ряд значений:   	transition-timing-function: cubic-bezier(.5, .6, .24, .18);
            }
            div:hover{
                background-color: red;
                width: 200px;
            }



        animation: animation-name animation-duration animation-timing-function animation-iteration-count animation-direction animation-delay animation-fill-mode
        @keyframes backgroundColorAnimation {
            from {
                background-color: red;
                opacity: 0.2;
            }
            to {
                background-color: blue;
                opacity: 0.9;
            }
        }
        div{
            width: 100px;
            height: 100px;
            margin: 40px 30px;
            border: 1px solid #333;
                         
            animation-name: backgroundColorAnimation;
            animation-duration: 3s;
            animation-timing-function: ease-in-out;
        }

        @keyframes backgroundColorAnimation {
            from {
                background-color: red;
            }
            25%{
                background-color: yellow;
            }
            50%{
                background-color: green;
            }
            75%{
                background-color: blue;
            }
            to {
                background-color: violet;
            }
        }
            
        @keyframes backgroundColorAnimation {
            from {
                background-color: red;
            }
            to {
                background-color: blue;
            }
        }
        @keyframes opacityAnimation {
            from {
                opacity: 0.2;
            }
            to {
                opacity: 0.9;
            }
        }
        div{
            width: 100px;
            height: 100px;
            margin: 40px 30px;
            border: 1px solid #333;
            background-color: #ccc;
             
            animation-name: backgroundColorAnimation, opacityAnimation;
            animation-duration: 2s, 3s;
        }








    }
    
    //https://www.google.com/fonts/ 
    //Font Squirrel
    //FontAwesome

    @font-face 
    {
        font-family: 'Roboto';
        src: url(http://fonts.gstatic.com/s/roboto/v15/mErvLBYg_cXG3rLvUsKT_fesZW2xOQ-xsNqO47m55DA.woff2);
        //src:url('fonts/roboto.ttf');
        // при выделении:
        //font-weight: normal;
        //font-style: normal;
    }

    @font-face 
    {
        font-family:'FontAwesome';
        src: url('https://maxcdn.bootstrapcdn.com/font-awesome/4.6.1/fonts/fontawesome-webfont.eot');
        src: url('https://maxcdn.bootstrapcdn.com/font-awesome/4.6.1/fonts/fontawesome-webfont.eot?#iefix') format('embedded-opentype'),
             url('https://maxcdn.bootstrapcdn.com/font-awesome/4.6.1/fonts/fontawesome-webfont.woff2') format('woff2'),
             url('https://maxcdn.bootstrapcdn.com/font-awesome/4.6.1/fonts/fontawesome-webfont.woff') format('woff'),
             url('https://maxcdn.bootstrapcdn.com/font-awesome/4.6.1/fonts/fontawesome-webfont.ttf') format('truetype'),
             url('https://maxcdn.bootstrapcdn.com/font-awesome/4.6.1/fonts/fontawesome-webfont.svg') format('svg');
    }



*/